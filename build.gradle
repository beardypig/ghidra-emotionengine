// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

apply plugin: 'java'
apply plugin: 'eclipse'

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
    ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
    ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
    apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
    throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

repositories { mavenCentral() }

dependencies {
	testCompile "org.hamcrest:hamcrest-all:1.3"
	testCompile "org.jmockit:jmockit:1.44"
	testCompile "junit:junit:4.12"
	runtimeOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Framework', include: "**/*.jar")
	runtimeOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Features', include: "**/*.jar")
	compileOnly fileTree(dir: ghidraInstallDir + '/Ghidra/Processors', include: "**/*.jar")
}

if (ghidra_version < "9.2") {
    throw new GradleException("Requires at least Ghidra 9.2, but was run with $ghidra_version")
}

eclipse.classpath.file.whenMerged {
	File javaDoc = new File(ghidraInstallDir+"/docs/GhidraAPI_javadoc.zip");
	def destroy = [];
	for (entry in entries) {
		if (entry.getPath().toString().contains("emotionengine")) {
			destroy.add(entry);
			continue;
		} else if (entry.path.contains('jar')) {
			File folder = new File(entry.getPath()).getParentFile();
			for (File file : folder.listFiles()) {
				if (file.getName().endsWith(".zip")) {
					entry.setSourcePath(it.fileReference(file));
					entry.setJavadocPath(it.fileReference(javaDoc));
				}
			}
		}
	}
	for (entry in destroy) {
		entries.remove(entry);
	}
}
