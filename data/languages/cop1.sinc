# FPU (COP1) instructions

#The Emotion Engine version of MIPS COP1 only supports single precision float operations

define register offset=0x1000 size=4 [
    f1  f0  f3  f2  f5  f4  f7  f6
    f9  f8  f11 f10 f13 f12 f15 f14
    f17 f16 f19 f18 f21 f20 f23 f22
    f25 f24 f27 f26 f29 f28 f31 f30
];

# Floating point control registers
define register offset=0x1200 size=4 [
    fir     fccr       fexr     fenr    fcsr
];

# Hidden floating point registers
define register offset=0x1300 size=4 [
	ACC
];

attach variables [ fs ft fd fr ] [
    f0  f1  f2  f3  f4  f5  f6  f7  f8  f9  f10 f11 f12 f13 f14 f15
    f16 f17 f18 f19 f20 f21 f22 f23 f24 f25 f26 f27 f28 f29 f30 f31
];

attach variables [ fs_fcr ] [
	fir		_		_		_		_		_		_		_
	_		_		_		_		_		_		_		_
	_		_		_		_		_		_		_		_
	_		fccr	fexr	_		fenr	_		_		fcsr
];

with : prime=17 & microMode=0 {  #COP1
	# 0100 01ff fff0 0000 ssss sddd dd00 0101
	:abs.S fd, fs               		is fct=5 & format=0x10 & fs & fd {
	    fd = abs(fs);
	}

	:adda.S fs, ft						is fct=24 & format=0x10 & ft & fs & fd=0 {
		ACC = fs f+ ft;
	}

	# 0100 01ff ffft tttt ssss sddd dd00 0000
	:add.S fd, fs, ft           		is fct=0 & format=0x10 & ft & fs & fd {
	    fd = fs f+ ft;
	}

	# 0100 0101 0000 0000 iiii iiii iiii iiii
	:bc1f Rel16                 		is copop=8 & copfct=0 & Rel16 {
	    tmp:1 = fcsr[23,1]; # The floating point condition bit
	    delayslot(1);
	    if (tmp != 0) goto inst_next;
	    goto Rel16;
	}


	# 0100 0101 0000 0010 iiii iiii iiii iiii
	:bc1fl Rel16                    	is copop=8 & copfct=2 & Rel16 {
	    if (fcsr[23,1] != 0) goto inst_next;
	    delayslot(1);
	    goto Rel16;
	}

	# 0100 0101 0000 0001 iiii iiii iiii iiii
	:bc1t Rel16                     	is copop=8 & copfct=1 & Rel16 {
	    tmp:1 = fcsr[23,1];
	    delayslot(1);
	    if (tmp == 0) goto inst_next;
	    goto Rel16;
	}

	# 0100 0101 0000 0011 iiii iiii iiii iiii
	:bc1tl Rel16                     	is copop=8 & copfct=3 & Rel16 {
	    if (fcsr[23,1] == 0) goto inst_next;
	    delayslot(1);
	    goto Rel16;
	}

	# 0100 01ff ffft tttt ssss s000 0011 0010
	:c.eq.S fs, ft              		is fct=50 & format=0x10 & fs & ft {
	    fcsr[23,1] = (fs f== ft);
	}

	:c.f.S fs, ft               		is fct=48 & format=0x10 & fs & ft {
	    fcsr[23,1] = 0; # Always false
	}

	:c.le.S fs, ft              		is fct=54 & format=0x10 & fs & ft {
	    fcsr[23,1] = (fs f<= ft);
	}

	:c.lt.S fs, ft              		is fct=52 & format=0x10 & fs & ft {
	    fcsr[23,1] = (fs f< ft);
	}

	# only defined for fir (0) and fcsr (31)
	:cfc1 RT, fs_fcr                	is copop=2 & RT & fs_fcr & (fs=0 | fs=31) & bigfunct=0 {
    	RT = sext(fs_fcr);
	}

	# only defined for fcsr (31)
	:ctc1 RTsrc, fs_fcr             	is copop=6 & RTsrc & fs_fcr & fs=31 & bigfunct=0 {
	    fs_fcr = RTsrc:4;
	}

	# only defined for fcsr (31)
	:clear fs_fcr             			is copop=6 & rt=0 & fs_fcr & fs=31 & bigfunct=0 {
	    fs_fcr = 0;
	}

	:cvt.s.W fd, fs             		is ft=0 & fct=32 & fd & fs & format=0x14 {
    	fd = int2float(fs);
	}

	# 0100 0110 0000 0000 ssss sddd dd10 0100
	:cvt.w.S fd, fs             		is ft=0 & fct=36 & fd & fs & format=0x10 {
	    # Convert from single float source to 32-bit integer word, using the fcsr RM rounding mode bits
	    bias:1 = fs[23,8];
	    msb:1 = fs[31,1];

	    if (bias > 0x9d) goto <clamp>;
	    fd = trunc(fs);
	    goto inst_next;
	   <clamp>
	    if (msb == 0) goto <neg>;
	    fd = 0x7FFFFFFF;
	    goto inst_next;
	   <neg>
		fd = 0x80000000;
	}

	# 0100 01ff ffft tttt ssss sddd dd00 0011
	:div.S fd, fs, ft           		is fct=3 & ft & fs & fd & format=0x10 {
	    fd = fs f/ ft;
	}

	:madd.S fd, fs, ft      			is fct=28 & fd & fs & ft & format=0x10 {
	    # TODO: not a complete implementation at all
	    fd = (fs f* ft) f+ ACC;
	}

	:madda.S fs, ft      				is fct=30 & fd=0 & fs & ft & format=0x10 {
	    # TODO: not a complete implementation at all
	    ACC = (fs f* ft) f+ ACC;
	}

	:max.S fd, fs, ft      				is fct=40 & fd & fs & ft & format=0x10 {
	    tmp_cond:1 = fs f> ft;
	    fd = (fs * zext(tmp_cond == 1)) | (ft * zext(tmp_cond == 0));
	}

	# 0100 0100 000t tttt ssss s000 0000 0000
	:mfc1 RT, fs                    	is copop=0 & RT & fs & bigfunct=0 {
	    RT = sext(fs);
	}

	:min.S fd, fs, ft      				is fct=41 & fd & fs & ft & format=0x10 {
	    tmp_cond:1 = fs f< ft;
	    fd = (fs * zext(tmp_cond == 1)) | (ft * zext(tmp_cond == 0));
	}

	# 0100 01ff fff0 0000 ssss sddd dd00 0110
	:mov.S fd, fs               		is fct=6 & fs & fd & format=0x10 & ft=0 {
	    fd = fs;
	}

	:msub.S fd, fs, ft      			is fct=29 & fd & fs & ft & format=0x10 {
	    # TODO: not a complete implementation at all
	    fd = ACC f- (fs f* ft);
	}

	:msuba.S fs, ft      				is fct=31 & fd=0 & fs & ft & format=0x10 {
	    # TODO: not a complete implementation at all
	    ACC = ACC f- (fs f* ft);
	}

	# 0100 0100 100t tttt dddd d000 0000 0000
	:mtc1 RT32src, fs                 	is copop=4 & RT32src & fs & bigfunct=0 {
	    # Move 32-bits of RTsrc to FPR fs
		fs = RT32src;
	}

	# 0100 0100 100t tttt dddd d000 0000 0000
	:clear fs                 	is copop=4 & rt=0 & fs & bigfunct=0 {
		fs = 0;
	}

	# 0100 01ff ffft tttt ssss sddd dd00 0010
	:mul.S fd, fs, ft           		is fct=2 & ft & fs & fd & format=0x10 {
	    fd = fs f* ft;
	}

	# 0100 01ff ffft tttt ssss sddd dd00 0010
	:mula.S fs, ft           			is fct=26 & ft & fs & fd=0 & format=0x10 {
	    ACC = fs f* ft;
	}

	# 0100 01ff fff0 0000 ssss sddd dd00 0111
	:neg.S fd, fs               		is fct=7 & ft=0 & fs & fd & format=0x10 {
	    fd = f- fs;
	}

	# 0100 01ff fff0 0000 ssss sddd dd01 0110
	:rsqrt.S fd, fs, ft            		is fct=22 & fd & fs & ft & format=0x10 {
	    fd = fs f/ sqrt(ft);
	}

	:sqrt.S fd, ft              		is fct=4 & fd & fs=0 & ft & format=0x10 {
	    fd = sqrt(ft);
	}

	# 0100 0110 000t tttt ssss sddd dd00 0001
	:sub.S fd, fs, ft           		is fct=1 & ft & fs & fd & format=0x10 {
	    fd = fs f- ft;
	}

	# 0100 0110 000t tttt ssss s000 0000 0001
	:suba.S fs, ft           			is fct=25 & ft & fs & fd=0 & format=0x10 {
	    ACC = fs f- ft;
	}

	:cop1 immed26                       is immed26 { }
}

:lwc1 ft, OFF_BASE              		is prime=49 & OFF_BASE & ft {
    ft = *[ram]:4 OFF_BASE;
}

# 1110 01bb bbbt tttt iiii iiii iiii iiii
:swc1 ft, OFF_BASE              		is prime=57 & OFF_BASE & ft {
    *[ram]:4 OFF_BASE = ft:4;
}
